# vim: set ft=zsh foldmethod=marker autoindent expandtab shiftwidth=4 :

function precmd_prompt {
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    # Truncate the path if it's too long.
    PR_FILLBAR=""
    PR_PWDLEN=""

    local promptsize=${#${(%):-xxx<  >}}
    local pwdsize=${#${(%):-%~}}

    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
        ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
        PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..-.)}"
    fi
}

setprompt () {
    # prompt_subst is not set by default. It allows variable substitution to
    # take place in the prompt, so I can just change the contents of certain
    # variables without recreating the prompt every time.
    setopt prompt_subst

    # See if we can use colors.
    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
        colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
        #eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        #eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
        eval PR_$color='%{$fg[${(L)color}]%}'
        eval PR_LIGHT_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        (( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    # See if we can use extended characters to look nicer.
    # http://www.tedmontgomery.com/tutorial/altchrc.html
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}


    # Finally, the prompt.

##    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
##$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
##$PR_GREEN%(!.%SROOT%s.%n)$PR_GREEN@%m:%l\
##$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
##$PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
##$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\
##
##$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
##%(?..$PR_LIGHT_RED%?$PR_BLUE:)\
##$PR_YELLOW%T\
##$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
##$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
##$PR_NO_COLOUR '
##

    PROMPT='${PR_LIGHT_GREEN}[ $PR_LIGHT_YELLOW%$PR_PWDLEN<...<%~%<<$PR_LIGHT_GREEN ]${(e)PR_FILLBAR}\

%(?..$PR_LIGHT_RED%? )$PR_NO_COLOUR$ '

    RPROMPT=' $PR_BLUE($PR_LIGHT_YELLOW%D{%H:%M}$PR_BLUE)$PR_NO_COLOUR'


    PS2='$PR_LIGHT_GREEN- $PR_LIGHT_BLUE%_$PR_LIGHT_GREEN -$PR_NO_COLOUR '

}

setprompt

# run TRAPALRM every $TMOUT seconds
TMOUT=30
TRAPALRM () {
    ## reset-prompt - this will update the prompt
    zle reset-prompt
}
