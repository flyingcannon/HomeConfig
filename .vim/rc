" vim: set ft=vim foldmethod=marker shiftwidth=2 st=2 ts=2:

set t_Co=256

filetype off
" Add directories in .vim/bundle to the runtime path
call pathogen#runtime_append_all_bundles()

" Basic {{{
set modeline
set modelines=5
set nocompatible " explicitly get out of vi-compatible mode
" }}}

" General {{{
set autoindent
set smartindent
set cindent
set nowrap
set mouse=
set noswapfile
" always switch to the current directory of the file you are editing
" see http://vim.wikia.com/wiki/Change_to_the_directory_of_the_current_file
if exists('+autochdir')
  set autochdir
else
  autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif
set ttyfast
set ruler
" }}}

" Wild {{{
"set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.swp,*.jpg,*.gif,*.png " ignore these
set wildmenu " turn on command line completion
set wildmode=full " turn on wild menu with full match
" }}}

" UI {{{
colorscheme timgreen
"colorscheme murphy
set cursorline
set cursorcolumn
set lazyredraw       " do not redraw while running macros
set matchtime=5      " how many tenths of a second to blink matching brackets for
set showmatch        " show matching brackets
set number           " turn on line numbers
set report=0         " tell us when anything is changed via :...
set shortmess=atToOI " shortens messages
set showcmd          " show the command being typed
set sidescrolloff=10 " Keep 5 lines at the size
set scrolloff=10     " Keep 5 lines (top/bottom) for scope
" }}}

" Search {{{
set ignorecase       " case insensitive by default
set smartcase        " if there are caps, go case-sensitive
" }}}

" Folding {{{
set foldcolumn=4 " fold column width
"   set foldenable " Turn on folding
"   set foldmarker={,} " Fold C style code (useful with high foldlevel)
"   set foldmethod=marker " Fold on the marker
"   set foldlevel=100 " Don't autofold anything (but I can still fold manually)
"   set foldopen=block,hor,mark,percent,quickfix,tag " what movements to open folds on
"   function SimpleFoldText() " {
"      return getline(v:foldstart).' '
"   endfunction " }
"   set foldtext=SimpleFoldText() " Custom fold text function (cleaner than default)
" }}}

" Statusline {{{
set laststatus=2                             " always
set statusline=
set statusline+=%2*%-3.3n%0*\                " buffer number
set statusline+=%-00.70f\                    " file name
set statusline+=%h%1*%m%r%w%0*               " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&fileencoding},                " encoding
set statusline+=%{&fileformat}]              " file format
if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim"))
  set statusline+=\ %{VimBuddy()}            " vim buddy
endif
set statusline+=%=                           " right align
set statusline+=%2*0x%-8B\                   " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset
" }}} Statusline

" Tabline {{{
set showtabline=2
function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " ÈÄâÊã©È´ò‰∫Æ
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " ËÆæÁΩÆÊ†áÁ≠æÈ°µÂè∑ (Áî®‰∫éÈº†Ê†áÁÇπÂáª)
    let s .= '%' . (i + 1) . 'T '

    " ÈÄâÊã©È´ò‰∫Æ
    if i + 1 == tabpagenr()
      let s .= '%#TabNumSel#' . (i + 1) . '%#TabLineSel#'
    else
      let s .= '%#TabNum#' . (i + 1) . '%#TabLine#'
    endif
    " MyTabLabel() Êèê‰æõÊ†áÁ≠æ
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  let s .= '%#TabLineFill#%T'
  return s
endfunction
function MyTabLabel(n)
  let label = ''
  let bufnrlist = tabpagebuflist(a:n)
  " Add '+' if one of the buffers in the tab page is modified
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor
  " Append the buffer name
  let name = bufname(bufnrlist[tabpagewinnr(a:n) - 1])
  if name == ''
    " give a name to no-name documents
    if &buftype=='quickfix'
      let name = '[Quickfix List]'
    else
      let name = '[No Name]'
    endif
  else
    " get only the file name
    let name = fnamemodify(name, ":t")
  endif
  let label .= name
  " Append the number of windows in the tab page
  let wincount = tabpagewinnr(a:n, '$')
  if wincount > 1
    let label .= '[' . wincount . ']'
  endif
  return label
endfunction
set tabline=%!MyTabLine()
" }}}

" Menu {{{
an 40.800 &Tools.-SEP4- <NOP>
an 40.810.10 &Tools.File&Encoding.UTF-8 :e ++enc=utf-8<CR>
an 40.810.20 &Tools.File&Encoding.GBK :e ++enc=gbk<CR>
an 40.810.30 &Tools.File&Encoding.BIG5 :e ++enc=big5<CR>
an 40.820 &Tools.Ê∏ÖÁêÜË°åÊú´Á©∫Ê†º :%s/\s\+$//<CR>
" }}} Menu

" Map {{{
"" forcing use hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

"" forcing use of tabs
nnoremap gf <C-W>gf
cab      e  tabe

"" tab nav
nmap <C-Left> :tabprevious<CR>
nmap <C-Right> :tabnext<CR>
map <C-Left> :tabprevious<CR>
map <C-Right> :tabnext<CR>
imap <C-Left> <ESC>:tabprevious<CR>
imap <C-Right> <ESC>:tabnext<CR>

map <Space>p :tabprevious<CR>
map <Space>n :tabnext<CR>
map <Space>h :tabprevious<CR>
map <Space>l :tabnext<CR>

map <Space>1 :tabfirst<CR>
map <Space>2 :tabnext 2<CR>
map <Space>3 :tabnext 3<CR>
map <Space>4 :tabnext 4<CR>
map <Space>5 :tabnext 5<CR>
map <Space>6 :tabnext 6<CR>
map <Space>7 :tabnext 7<CR>
map <Space>8 :tabnext 8<CR>

"" Command-T
function SmartCommandT()
  if exists("b:NERDTreeRoot")
    exec 'CommandT ' . b:NERDTreeRoot.path.str()
  else
    CommandT
  endif
endfunction
map <Space>t  :call SmartCommandT()<CR>
map <Space>tb :CommandTBuffer<CR>

"" others
map  <F1> <Nop>
map! <F1> <Nop>
"" disable delete in mac
imap [3~ <Nop>

function! TODOQFixToggle()
  if bufname("%") == ""
    cclose
    unlet w:qfix_win
  elseif exists("w:qfix_win")
    cclose
    unlet w:qfix_win
  else
    vimgrep /TODO\|FIXME/gj %
    let w:qfix_win=bufname("%")
    copen 10
  endif
endfunction
map  <F3> <ESC>:call TODOQFixToggle()<CR>
map! <F3> <ESC>:call TODOQFixToggle()<CR>
nnoremap <silent> <F9> :NERDTreeToggle<CR>
" }}}

" Toggle {{{
function! s:RunAndEcho(cmd)
  exe a:cmd
  echo a:cmd
endfunction

map th :nohlsearch<CR>

function! ToggleWrap()
  if &wrap
    call s:RunAndEcho('set nowrap')
  else
    call s:RunAndEcho('set wrap')
  endif
endfunction
map tw :call ToggleWrap()<CR>

function! ToggleCheckSpell()
  if &spell
    call s:RunAndEcho('set nospell')
  else
    call s:RunAndEcho('set spell')
  endif
endfunction
map ts :call ToggleCheckSpell()<CR>

function! ToggleCursorColumn()
  if &cursorcolumn
    call s:RunAndEcho('set nocursorcolumn')
  else
    call s:RunAndEcho('set cursorcolumn')
  endif
endfunction
map tc :call ToggleCursorColumn()<CR>

function! ToggleFoldColumn()
  if &foldcolumn
    call s:RunAndEcho('set foldcolumn=0')
  else
    call s:RunAndEcho('set foldcolumn=4')
  endif
endfunction
map tf :call ToggleFoldColumn()<CR>

function! ToggleRelativeNumber()
  if &number
    call s:RunAndEcho('set relativenumber')
  else
    call s:RunAndEcho('set number')
  endif
endfunction
map tn :call ToggleRelativeNumber()<CR>

function! ToggleTagBar()
	call s:RunAndEcho('TagbarToggle')
endfunction
map tt :call ToggleTagBar()<CR>
" }}} Toggle

" FileType {{{
filetype plugin indent on

augroup filetypedetect
  "" ËÆ©ÊñáÊú¨Êñá‰ª∂‰πüÊúâÈ´ò‰∫ÆÔºåthanks to xbeta@smth
  "au BufNewFile,BufRead *.* setf ztxt
  " ÁºìÂÜ≤Âå∫ÂÜôÂÖ•Êñá‰ª∂ÁöÑÊó∂ÂÄôËá™Âä®Ê£ÄÊü•Êñá‰ª∂Á±ªÂûã
  au BufWritePost * filet detect
augroup END

  " Helper functions {{{
  " Set default indent and tab
  function! SetTabIndent(i)
    set linebreak
    exe "setlocal shiftwidth=" . a:i
    exe "setlocal tabstop=" . a:i
    exe "setlocal softtabstop=" . a:i
    exe "setlocal ts=" . a:i
    setlocal smarttab
    setlocal expandtab
    setlocal smartindent
    setlocal ai
    setlocal shiftround
  endfunction
  "call SetTabIndent(2)

  function SetTextWidth(i)
    exe "set textwidth=" . a:i
    if &textwidth != 0
      setlocal colorcolumn=+0,+20
    endif
  endfunction
  " }}} Helper functions
" }}} FileType

" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim

" Plugin Configs {{{
  " taglist {{{
  nnoremap <silent> <F8> :TlistUpdate<CR>:TlistToggle<CR>
  let Tlist_Show_One_File = 1
  let Tlist_Use_Right_Window = 1
  let Tlist_Exit_OnlyWindow = 1
  let Tlist_File_Fold_Auto_Close = 1
  let Tlist_GainFocus_On_ToggleOpen = 1
  let Tlist_WinWidth = 70
  " }}} taglist
  " snipMate {{{
  let g:snips_author = 'Tim Green'
  " }}}
  " CommandT {{{
  let g:CommandTMatchWindowAtTop = 1
  " }}}
" }}} Plugin Configs

" An example for a gvimrc file. {{{
" The commands in this are executed when the GUI is started.
"
" Maintainer:  Bram Moolenaar <Bram@vim.org>
" Last change:  2001 Sep 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.gvimrc
"        for Amiga:  s:.gvimrc
"  for MS-DOS and Win32:  $VIM\_gvimrc
"      for OpenVMS:  sys$login:.gvimrc

" Make external commands work through a pipe instead of a pseudo-tty
"set noguipty

" set the X11 font to use
" set guifont=-misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1

set mousehide    " Hide the mouse when typing text

" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

" Only do this for Vim version 5.0 and later.
if version >= 500

  " I like highlighting strings inside C comments
  let c_comment_strings=1

  " Switch on syntax highlighting if it wasn't on yet.
  if !exists("syntax_on")
    syntax on
  endif

  " Switch on search pattern highlighting.
  set hlsearch

  " For Win32 version, have "K" lookup the keyword in a help file
  "if has("win32")
  "  let winhelpfile='windows.hlp'
  "  map K :execute "!start winhlp32 -k <cword> " . winhelpfile <CR>
  "endif

  " Set nice colors
  " background for normal text is light grey
  " Text below the last line is darker grey
  " Cursor is green, Cyan when ":lmap" mappings are active
  " Constants are not underlined but have a slightly lighter background
endif
" }}}

" Load ext {{{
runtime! ext.rc
" }}}
