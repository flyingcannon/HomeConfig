" vim: set ft=vim foldmethod=marker shiftwidth=2 st=2 ts=2:

set t_Co=256

" Basic {{{
set modeline
set modelines=5
set nocompatible " explicitly get out of vi-compatible mode
" }}}

" General {{{
"""set autochdir " always switch to the current directory of the file you are editing
set autoindent
set smartindent
set cindent
set nowrap
set mouse=h
set directory=~/.cache/vim/ " swap file dir
" }}}

" Wild {{{
"set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.swp,*.jpg,*.gif,*.png " ignore these
set wildmenu " turn on command line completion
set wildmode=full " turn on wild menu with full match
" }}}

" UI {{{
colorscheme timgreen
set cursorline
set cursorcolumn
set lazyredraw " do not redraw while running macros
set matchtime=5 " how many tenths of a second to blink matching brackets for
set showmatch " show matching brackets
set number " turn on line numbers
set report=0 " tell us when anything is changed via :...
set shortmess=atToOI " shortens messages
set showcmd " show the command being typed
set sidescrolloff=10 " Keep 5 lines at the size
set scrolloff=10 " Keep 5 lines (top/bottom) for scope
" }}}

" Search {{{
set ignorecase " case insensitive by default
set smartcase " if there are caps, go case-sensitive
" }}}

" Folding {{{
set foldcolumn=4 " fold column width
"   set foldenable " Turn on folding
"   set foldmarker={,} " Fold C style code (useful with high foldlevel)
"   set foldmethod=marker " Fold on the marker
"   set foldlevel=100 " Don't autofold anything (but I can still fold manually)
"   set foldopen=block,hor,mark,percent,quickfix,tag " what movements to open folds on
"   function SimpleFoldText() " {
"      return getline(v:foldstart).' '
"   endfunction " }
"   set foldtext=SimpleFoldText() " Custom fold text function (cleaner than default)
" }}}

" Statusline {{{
set laststatus=2
set statusline=
set statusline+=%2*%-3.3n%0*\                " buffer number
set statusline+=%-00.70f\                    " file name
set statusline+=%h%1*%m%r%w%0*               " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&fileencoding},                " encoding
set statusline+=%{&fileformat}]              " file format
if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim"))
  set statusline+=\ %{VimBuddy()}            " vim buddy
endif
set statusline+=%=                           " right align
set statusline+=%2*0x%-8B\                   " current char
set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset
" }}} Statusline

" Menu {{{
an 40.800 &Tools.-SEP4- <NOP>
an 40.810.10 &Tools.File&Encoding.UTF-8 :e ++enc=utf-8<CR>
an 40.810.20 &Tools.File&Encoding.GBK :e ++enc=gbk<CR>
an 40.810.30 &Tools.File&Encoding.BIG5 :e ++enc=big5<CR>
an 40.820 &Tools.清理行末空格 :%s/\s\+$//<CR>
" }}} Menu

" Map {{{
"" forcing use of tabs
nnoremap gf <C-W>gf
cab      e  tabe

"" tab nav
nmap <C-Left> :tabprevious<CR>
nmap <C-Right> :tabnext<CR>
map <C-Left> :tabprevious<CR>
map <C-Right> :tabnext<CR>
imap <C-Left> <ESC>:tabprevious<CR>
imap <C-Right> <ESC>:tabnext<CR>

map <Space>p :tabprevious<CR>
map <Space>n :tabnext<CR>
map <Space>h :tabprevious<CR>
map <Space>l :tabnext<CR>

map <Space>1 :tabfirst<CR>
map <Space>2 :tabnext 2<CR>
map <Space>3 :tabnext 3<CR>
map <Space>4 :tabnext 4<CR>
map <Space>5 :tabnext 5<CR>
map <Space>6 :tabnext 6<CR>
map <Space>7 :tabnext 7<CR>
map <Space>8 :tabnext 8<CR>

"" others
map  <F1> <Nop>
map! <F1> <Nop>
map  <F2> :up<CR>
map! <F2> <ESC>:up<CR>a
map  <F5> :tabe<CR>:LUWalk<CR>
map! <F5> <ESC>:tabe<CR>:LUWalk<CR>
"" disable delete in mac
imap [3~ <Nop>

function! TODOQFixToggle()
  if bufname("%") == ""
    cclose
    unlet w:qfix_win
  elseif exists("w:qfix_win")
    cclose
    unlet w:qfix_win
  else
    vimgrep /TODO\|FIXME/gj %
    let w:qfix_win=bufname("%")
    copen 10
  endif
endfunction
map  <F3> <ESC>:call TODOQFixToggle()<CR>
map! <F3> <ESC>:call TODOQFixToggle()<CR>
nnoremap <silent> <F9> :NERDTreeToggle<CR>
" }}}

" Toggle {{{
function! s:RunAndEcho(cmd)
  exe a:cmd
  echo a:cmd
endfunction

function! TempTurnOffHightlightSearch()
  call s:RunAndEcho('nohlsearch')
endfunction
map th :call TempTurnOffHightlightSearch()<CR>

function! ToggleWrap()
	if &wrap
		call s:RunAndEcho('set nowrap')
	else
		call s:RunAndEcho('set wrap')
	endif
endfunction
map tw :call ToggleWrap()<CR>

function! ToggleCheckSpell()
	if &spell
		call s:RunAndEcho('set nospell')
	else
		call s:RunAndEcho('set spell')
	endif
endfunction
map ts :call ToggleCheckSpell()<CR>

function! ToggleCursorColumn()
  if &cursorcolumn
		call s:RunAndEcho('set nocursorcolumn')
  else
		call s:RunAndEcho('set cursorcolumn')
	endif
endfunction
map tc :call ToggleCursorColumn()<CR>

function! ToggleFoldColumn()
  if &foldcolumn
		call s:RunAndEcho('set foldcolumn=0')
  else
		call s:RunAndEcho('set foldcolumn=4')
	endif
endfunction
map tf :call ToggleFoldColumn()<CR>
" }}} Toggle

" IMAP {{{ need latexsuite
"" runtime! plugin/IMAP.vim
set grepprg=grep\ -nH\ $*
function! SetIMAP()
	call IMAP('""', '""', '')
	call IMAP('()', '(<++>)<++>', '')
	call IMAP('[]', '[<++>]<++>', '')
	call IMAP('for  ', 'for (<++>) {<++>}<++>', '')
	call IMAP('if  ', 'if (<++>) {<++>}<++>', '')
	call IMAP('else  ', 'else {<++>}<++>', '')
endfunction
" }}} IMAP

" FileType {{{
filetype plugin indent on

augroup filetypedetect
  "" 让文本文件也有高亮，thanks to xbeta@smth
  "au BufNewFile,BufRead *.* setf ztxt
	" 缓冲区写入文件的时候自动检查文件类型
	au BufWritePost * filet detect
augroup END

  " Helper functions {{{
  " Set default indent and tab
  function! SetTabIndent(i)
		set textwidth=78
    set ai
    exe "set shiftwidth=" . a:i
    exe "set tabstop=" . a:i
    exe "set softtabstop=" . a:i
    exe "set ts=" . a:i
    set expandtab
		set shiftround
  endfunction
	"" call SetTabIndent(2)

  function! HighlightTooLongLines()
    highlight def link RightMargin Error
    if &textwidth != 0
      " FIXME: 中文上工作不正常 (半格的情况)
      exec 'match RightMargin /\%<' . (&textwidth + 4) . 'v.\%>' . (&textwidth + 2) . 'v/'
    endif
  endfunction
  " }}} Helper functions
" }}} FileType

" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim

" Multi-encoding setting {{{
if has("multi_byte")
  " set bomb
  " 该顺序不能颠倒，并且在后面再添加其它编码如 big5、latin1 也是没有意义的，因为 Vim 不能识别 8比特编码中的错误，因此这些编码后列的编码永远不会被用到。
  " 不能自动识别的文件，则可以使用以下命令：':e ++enc=编码 文件名'。详情可参考“:help ++enc'。
  set fileencodings=ucs-bom,utf-8,chinese

  set encoding=utf-8
  set termencoding=utf-8
else
  echoerr "Sorry, this version of (g)vim was not compiled with multi_byte"
endif
" }}} Multi-encoding setting

" Plugin Configs {{{
	" lookupfile {{{
	let g:LookupFile_DefaultCmd = ':LUWalk'
	let g:LookupFile_DisableDefaultMap = 1
	" }}} lookupfile
	" taglist {{{
	nnoremap <silent> <F8> :TlistUpdate<CR>:TlistToggle<CR>
	let Tlist_Show_One_File = 1
	let Tlist_Use_Right_Window = 1
	let Tlist_Exit_OnlyWindow = 1
	let Tlist_File_Fold_Auto_Close = 1
	let Tlist_GainFocus_On_ToggleOpen = 1
	let Tlist_WinWidth = 70
	" }}} taglist
" }}} Plugin Configs

" An example for a gvimrc file. {{{
" The commands in this are executed when the GUI is started.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2001 Sep 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.gvimrc
"	      for Amiga:  s:.gvimrc
"  for MS-DOS and Win32:  $VIM\_gvimrc
"	    for OpenVMS:  sys$login:.gvimrc

" Make external commands work through a pipe instead of a pseudo-tty
"set noguipty

" set the X11 font to use
" set guifont=-misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1

set mousehide		" Hide the mouse when typing text

" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

" Only do this for Vim version 5.0 and later.
if version >= 500

  " I like highlighting strings inside C comments
  let c_comment_strings=1

  " Switch on syntax highlighting if it wasn't on yet.
  if !exists("syntax_on")
    syntax on
  endif

  " Switch on search pattern highlighting.
  set hlsearch

  " For Win32 version, have "K" lookup the keyword in a help file
  "if has("win32")
  "  let winhelpfile='windows.hlp'
  "  map K :execute "!start winhlp32 -k <cword> " . winhelpfile <CR>
  "endif

  " Set nice colors
  " background for normal text is light grey
  " Text below the last line is darker grey
  " Cursor is green, Cyan when ":lmap" mappings are active
  " Constants are not underlined but have a slightly lighter background
endif
" }}}

" Load ext {{{
runtime! ext.rc
" }}}
